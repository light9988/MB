name: Build packer AMI

on:
    pull_request:
      branches: [ "main" ]
      types:
        - closed
  
jobs:
    build-and-deploy:
      if: github.event.pull_request.merged == true
      runs-on: ubuntu-latest

      services:
        mariadb:
          image: mariadb:latest
          ports:
            - 3306:3306
          env:
            MARIADB_ROOT_PASSWORD: password
            MARIADB_DATABASE: db
            MARIADB_USER: dev
            MARIADB_PASSWORD: password
          options: --health-cmd="healthcheck.sh --connect --innodb_initialized" --health-interval=10s --health-timeout=5s --health-retries=3

      steps:
        - name: Checkout Repository
          uses: actions/checkout@v2
        - name: Set up Node.js
          uses: actions/setup-node@v2
          with:
            node-version: 18.18.0

        - name: Setup Environment Variables
          run: |
            echo 'DATABASE_DIALECT=mariadb' >> ./.env
            echo 'DATABASE_NAME=db' >> ./.env
            echo 'DATABASE_USERNAME=dev' >> ./.env
            echo 'DATABASE_PASSWORD=password' >> ./.env
            echo 'DATABASE_HOSTNAME=localhost' >> ./.env

        - name: Install dependencies
          run: npm install

        - name: Run integration test
          run: npm test

        - name: Configure AWS dev credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_DEV}}
            aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY_DEV}}
            aws-region: us-west-2

        - name: Setup packer
          uses: hashicorp/setup-packer@main
  
        - name: Compress webapp
          run: |
            ls -al
            zip -r webapp.zip . -x "*.git*" "node_modules/*"

        - name: Init packer
          run: packer init -var-file="./packer/variables.pkr.hcl" ./packer/ami.pkr.hcl

        - name: Run packer format  
          run: packer fmt -var-file="./packer/variables.pkr.hcl" ./packer/ami.pkr.hcl
    
        - name: Build ami with packer
          run: packer build -var-file="./packer/variables.pkr.hcl" ./packer/ami.pkr.hcl
  
        - name: Configure AWS demo credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_DEMO}}
            aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY_DEMO}}
            aws-region: us-west-2

        - name: Install AWS CLI
          run: |
            sudo apt-get update
            sudo apt-get install -y awscli

        - name: Get latest ami id
          run: |
            LATEST_AMI_ID=$(aws ec2 describe-images --filters "Name=state,Values=available" --query 'sort_by(Images, &CreationDate)[-1].ImageId' --output text)
            echo "LATEST_AMI_ID=$LATEST_AMI_ID" >> $GITHUB_ENV

        - name: Get latest launch template id
          run: |
            LATEST_LT_ID=$(aws ec2 describe-launch-templates --query 'sort_by(LaunchTemplates, &CreateTime)[-1].LaunchTemplateId' --output text)
            echo "LATEST_LT_ID=$LATEST_LT_ID" >> $GITHUB_ENV

        - name: Get latest launch template version
          run: |
            LATEST_VERSION=$(aws ec2 describe-launch-templates --launch-template-ids $LATEST_LT_ID --query 'LaunchTemplates[0].LatestVersionNumber' --output text)
            echo "LATEST_VERSION=$LATEST_VERSION" >> $GITHUB_ENV
        - run: |
            echo "{"ImageId":\"$LATEST_AMI_ID\"}"
            echo $LATEST_AMI_ID

        - name: Create a new version of the Launch Template
          run: aws ec2 create-launch-template-version --launch-template-id $LATEST_LT_ID --source-version $LATEST_VERSION --launch-template-data {\"ImageId\":\"$LATEST_AMI_ID\"}

        - name: Get Auto Scaling Group Name
          id: get-asg-name
          run: |
            ASG_NAME=$(aws autoscaling describe-auto-scaling-groups --query 'AutoScalingGroups[0].AutoScalingGroupName' --output text)
            echo "ASG_NAME=${ASG_NAME}" >> $GITHUB_ENV
  
        - name: Display Auto Scaling Group Name
          run: |
            echo "Auto Scaling Group Name: ${{ env.ASG_NAME }}"

        - name: Start instance fresh
          run: aws autoscaling start-instance-refresh --auto-scaling-group-name ${{ env.ASG_NAME }}

        - name: Wait for instance refresh completion
          run: |
            start_time=$(date +%s)
            echo "start time: $start_time"
        
            while true; do
              status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name ${{ env.ASG_NAME }} --output json | jq -r '.InstanceRefreshes[0].Status')
        
              if [ "$status" == "Pending" ]; then
                echo "Instance refresh is pending. Waiting..."
              fi

              if [ "$status" == "InProgress" ]; then
                echo "Instance refresh in progress. Waiting..."
              fi
        
              if [ "$status" == "Successful" ]; then
                echo "Instance refresh status: $status"
                current_time=$(date +%s)
                elapsed_time=$((current_time - start_time))
                echo "Elapsed time: $elapsed_time seconds"
                break
              fi
        
              if [ "$status" == "Cancelling" ] || [ "$status" == "Cancelled" ]; then
                echo "Instance refresh has been cancelled. Exiting."
                exit 1
              fi

              if [ "$status" == "Failed" ]; then
                echo "Instance refresh has failed. Exiting."
                exit 1
              fi
        
              sleep 10  
            done
        
